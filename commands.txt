# Keychain Access

sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain playground.dev.crt

--------------------------------------------------------------------------------

# OpenSSL

openssl req \
    -newkey rsa:2048 \
    -x509 \
    -nodes \
    -keyout playground.local.key \
    -new \
    -out playground.local.crt \
    -subj /CN=\*.playground.local \
    -reqexts SAN \
    -extensions SAN \
    -config <(cat /System/Library/OpenSSL/openssl.cnf \
        <(printf '[SAN]\nsubjectAltName=DNS:\*.playground.local')) \
    -sha256 \
    -days 3650

--------------------------------------------------------------------------------

# Phony targets
#.PHONY: clean clean-all help install reset shell start restart start-production start-production-build test ztag

--------------------------------------------------------------------------------

##@ CI/CD:

.PHONY: ci-test
ci-test: ## Run tests and create code coverage reports
	# Print task status
	@echo "Running tests and creating code coverage reports..."

	# Run a container for testing, run tests, and generate code coverage reports
	@docker-compose -f docker-compose.yml -f docker-compose.ci.yml up app

	# Copy LCOV data from the container's file system to the CI's
	@docker cp app-ci:${CONTAINER_WORKDIR}/coverage ./

	# Replace container's working directory path with the CI's
	@yarn replace ${CONTAINER_WORKDIR} ${TRAVIS_BUILD_DIR} ${LCOV_DATA}

--------------------------------------------------------------------------------

##@ Release & Deployment

.PHONY: release
release: ## TODO: Set release version to package.json, .travis.yml, .env
	@$(call console,TODO: Set release version)
	@sed -i='' "s/<BUILD_VERSION>/${RELEASE_VERSION}/" ${CONFIG_FILE_CI}

--------------------------------------------------------------------------------

scripts/deploy.sh

sed -i='' "s/<IMAGE_ACCOUNT>/${BUILD_ACCOUNT}/" ${PRODUCTION_CONFIG}
sed -i='' "s/<IMAGE_REPO>/${BUILD_REPO}/" ${PRODUCTION_CONFIG}
sed -i='' "s/<IMAGE_TAG>/${BUILD_VERSION}/" ${PRODUCTION_CONFIG}

--------------------------------------------------------------------------------

.PHONY: ci-deploy
ci-deploy: ## Create deployment configuration and build a production image
	@$(call console,Creating deployment configuration and building a production image...)
	@${SCRIPTS_PATH}/deploy.sh

--------------------------------------------------------------------------------

.PHONY: ci-deploy
ci-deploy: ## Create deployment configuration and build a production image
	@$(create-deployment-config)
	@$(create-production-image)

--------------------------------------------------------------------------------

.PHONY: version
version: ## TODO: Set release version
	@$(call set-property,version,${RELEASE_VERSION},${CONFIG_FILE_NPM})
	@$(call set-property,Name,${IMAGE_NAME},${CONFIG_FILE_PRODUCTION})

--------------------------------------------------------------------------------

{
  "AWSEBDockerrunVersion": "1",
  "Image": {
    "Name": "<IMAGE_TAG>",
    "Update": "true"
  },
  "Ports": [
    {
      "ContainerPort": "80"
    }
  ],
  "Logging": "/var/log/nginx"
}

--------------------------------------------------------------------------------

.PHONY: start-production-build
start-production-build: ## Build an image and run the production build locally
	@$(call log-start,Build an image and run the production build locally...)
	@$(call log-step,[Step 1/3] Build a production image)
	@$(call log-step,[Step 1/3] Create an optimized production build)
	@$(call log-step,[Step 1/3] Restart the production and reverse proxy containers)
	@docker-compose \
	-f docker-compose.yml \
	-f docker-compose.production.yml \
	up --build
	@$(newline)
	@$(call log-info,Visit https://playground)

--------------------------------------------------------------------------------

.PHONY: yo
yo: ## Yo
	if [ "$$(docker image inspect busybox:latest2 > /dev/null)" == "" ]; then \
		echo "The image exists"; \
	else \
		echo "Not found"; \
	fi;
.ONESHELL:

--------------------------------------------------------------------------------

.PHONY: ztag
ztag: ## Sandbox
	@sed -i='' "s/<IMAGE_ACCOUNT>/rxseven/" Dockerrun.aws.json
	@sed -i='' "s/<IMAGE_REPO>/playground/" Dockerrun.aws.json
	@sed -i='' "s/<IMAGE_TAG>/0.0.11/" Dockerrun.aws.json

--------------------------------------------------------------------------------

define wtf =
	if [[ "$(docker image inspect busybox:latest2 > /dev/null)" == "" ]]
	then
		echo "The image exists"
	else
		echo "Not found"
	fi
endef

--------------------------------------------------------------------------------

	@docker pull ${IMAGE_BASE_NGINX}
	@docker pull ${IMAGE_BASE_NODE}
	@docker pull ${IMAGE_BASE_PROXY}

  sudo -- sh -c -e echo "127.0.0.1       playground.prod" >> /etc/hosts
  echo "127.0.0.1       playground.prod" | sudo tee -a /etc/hosts

--------------------------------------------------------------------------------

@$(call set-property,version,${RELEASE_VERSION},${CONFIG_FILE_NPM})

--------------------------------------------------------------------------------

-@docker image prune --filter label=project=docker-playground --force

set-property2 = @sed -i '' 's|\(.*"$(1)"\): "\(.*\)".*|\1: '"\"$(2)\"|" $(3)

--------------------------------------------------------------------------------

# Add metadata to an image
LABEL project="docker-playground"
LABEL description="Docker playground image"
LABEL environment="Development"
LABEL license="GNU Affero General Public License v3.0"
LABEL maintainer="Theerawat Pongsupawat <rxseven.com@gmail.com>"

--------------------------------------------------------------------------------

      - ${PORT_DEFAULT}:${PORT_DEFAULT}
      - ${PORT_SSL}:${PORT_SSL}

--------------------------------------------------------------------------------

.PHONY: www
www:
	@if [ ! -d "tmp" ]; then \
		echo "does not exist"; \
	fi;
	@$(call log-success,Done)


--------------------------------------------------------------------------------

.PHONY: try-aws
try-aws: ## Try AWS
	@$(call log-start,Trying to update Dockerrun.aws.json...)
	@cat Dockerrun.aws.json
	@sed -ie 's|\(.*"Name"\): "\(.*\)",.*|\1: '"\"${IMAGE_NAME}\",|" ${CONFIG_FILE_AWS}
	@cat Dockerrun.aws.json

--------------------------------------------------------------------------------

.PHONY: ci-check
ci-check: ## Check CI
	@sed -i.backup 's|\(.*"Name"\): "\(.*\)",.*|\1: '"\"${IMAGE_NAME}\",|" ${CONFIG_FILE_AWS}
	@cat ${CONFIG_FILE_AWS}
	@ls
	@rm ${CONFIG_FILE_AWS}.backup
	@ls

--------------------------------------------------------------------------------

.PHONY: deploy
deploy: ## Deploy
	@$(create-deployment-config)

.PHONY: yo
yo: ## Yo
	@echo "Running tests and creating code coverage reports..."
	@printf "\e[32;1mRunning tests and creating code coverage reports...\e[0m \n"

--------------------------------------------------------------------------------

.PHONY: yo
yo: ## Yo
	@$(call log-step,yo-text-here)

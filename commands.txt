# Keychain Access

sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain playground.dev.crt

--------------------------------------------------------------------------------

# OpenSSL

openssl req \
    -newkey rsa:2048 \
    -x509 \
    -nodes \
    -keyout playground.local.key \
    -new \
    -out playground.local.crt \
    -subj /CN=\*.playground.local \
    -reqexts SAN \
    -extensions SAN \
    -config <(cat /System/Library/OpenSSL/openssl.cnf \
        <(printf '[SAN]\nsubjectAltName=DNS:\*.playground.local')) \
    -sha256 \
    -days 3650

--------------------------------------------------------------------------------

# Phony targets
#.PHONY: clean clean-all help install reset shell start restart start-production start-production-build test ztag

--------------------------------------------------------------------------------

##@ CI/CD:

.PHONY: ci-test
ci-test: ## Run tests and create code coverage reports
	# Print task status
	@echo "Running tests and creating code coverage reports..."

	# Run a container for testing, run tests, and generate code coverage reports
	@docker-compose -f docker-compose.yml -f docker-compose.ci.yml up app

	# Copy LCOV data from the container's file system to the CI's
	@docker cp app-ci:${CI_CONTAINER_WORKDIR}/coverage ./

	# Replace container's working directory path with the CI's
	@yarn replace ${CI_CONTAINER_WORKDIR} ${TRAVIS_BUILD_DIR} ${CI_LCOV_DATA}

--------------------------------------------------------------------------------

##@ Release & Deployment

.PHONY: release
release: ## TODO: Set release version to package.json, .travis.yml, .env
	@$(call console,TODO: Set release version)
	@sed -i='' "s/<CI_BUILD_VERSION>/${RELEASE_VERSION}/" ${CONFIG_FILE_CI}

--------------------------------------------------------------------------------

scripts/deploy.sh

sed -i='' "s/<IMAGE_ACCOUNT>/${CI_BUILD_ACCOUNT}/" ${CI_PRODUCTION_CONFIG}
sed -i='' "s/<IMAGE_REPO>/${CI_BUILD_REPO}/" ${CI_PRODUCTION_CONFIG}
sed -i='' "s/<IMAGE_TAG>/${CI_BUILD_VERSION}/" ${CI_PRODUCTION_CONFIG}

--------------------------------------------------------------------------------

.PHONY: ci-deploy
ci-deploy: ## Create deployment configuration and build a production image
	@$(call console,Creating deployment configuration and building a production image...)
	@${CI_SCRIPTS_PATH}/deploy.sh

--------------------------------------------------------------------------------

.PHONY: ci-deploy
ci-deploy: ## Create deployment configuration and build a production image
	@$(create-deployment-config)
	@$(create-production-image)

--------------------------------------------------------------------------------

.PHONY: version
version: ## TODO: Set release version
	@$(call set-property,version,${RELEASE_VERSION},${CONFIG_FILE_NPM})
	@$(call set-property,Name,${IMAGE_NAME},${CONFIG_FILE_PRODUCTION})

--------------------------------------------------------------------------------

.PHONY: deploy
deploy: ## Deploy
	@$(create-deployment-config)

.PHONY: yo
yo: ## Yo
	@echo "Running tests and creating code coverage reports..."
	@printf "\e[32;1mRunning tests and creating code coverage reports...\e[0m \n"
    
# V1 - works

.PHONY: install
install: ## Install a package (by passing "package" argument as part of the command)
	@if [ "$$package" != "" ]; then \
		$(call log-step,[Step 1/5] Build the development image (if needed)) \
		$(call log-step,[Step 2/5] Create and start a container for installing dependencies) \
		$(call log-step,[Step 3/5] Install $$package package in the persistent storage (volume)) \
		$(call log-step,[Step 4/5] Update package.json and yarn.lock) \
		$(call log-step,[Step 5/5] Remove the container) \
		docker-compose run --name playground-installing --rm app add $$package; \
		$(call log-success,Done) \
	else \
		echo "You did not enter the package name, please try again"; \
	fi;

--------------------------------------------------------------------------------

# V2 - better

.PHONY: install
install: ## Install a package and any packages that it depends on
	@read -p "Enter package name: " package; \
	if [ "$$package" != "" ]; then \
		$(call log-step,[Step 1/5] Build the development image (if needed)) \
		$(call log-step,[Step 2/5] Create and start a container for installing dependencies) \
		$(call log-step,[Step 3/5] Install $$package package in the persistent storage (volume)) \
		$(call log-step,[Step 4/5] Update package.json and yarn.lock) \
		$(call log-step,[Step 5/5] Remove the container) \
		docker-compose run --name playground-installing --rm app add $$package; \
		$(call log-success,Done) \
	else \
		echo "You did not enter the package name, please try again"; \
	fi;

--------------------------------------------------------------------------------

# V3 - does not work

define script-install
	$(call log-step,[Step 1/5] Build the development image (if needed)) \
	$(call log-step,[Step 2/5] Create and start a container for installing dependencies) \
	$(call log-step,[Step 3/5] Install $(1) package in the persistent storage (volume)) \
	$(call log-step,[Step 4/5] Update package.json and yarn.lock) \
	$(call log-step,[Step 5/5] Remove the container) \
	docker-compose run --name playground-installing --rm app add $(1) \
	$(call log-success,Done)
endef

.PHONY: install
install: ## Install a package (by passing "package" argument as part of the command)
	@if [ "$$package" != "" ]; then \
		$(call script-install,$$package) \
	else \
		read -p "Enter package name: " package; \
		if [ "$$package" != "" ]; then \
			$(call script-install,$$package) \
		else \
			echo "You did not enter the package name, please try again"; \
		fi; \
	fi;

--------------------------------------------------------------------------------

# Not working

THIS_FILE := $(lastword $(MAKEFILE_LIST))

.PHONY: version
version: ## Set the next release version
	@$(call log-start,Setting the next release version...)
	@printf "The current version is $(call txt-bold,v${RELEASE_VERSION}) (released on ${RELEASE_DATE})\n"
	@$(newline)
	@printf "$(call txt-underline,Warning): You must reset the development environment built with the configuration of v${RELEASE_VERSION} before tagging a new release version\n"
	@$(newline)
	@read -p "Reset the development environment? " confirmation; \
	case "$$confirmation" in \
		[yY] | [yY][eE][sS]) \
			@$(MAKE) -f $(THIS_FILE) reset \
			read -p "Enter a version number: " VERSION; \
			if [ "$$VERSION" != "" ]; then \
				printf "The next release will be $(call txt-bold,v$$VERSION) on ${CURRENT_DATE} (today)\n"; \
				$(call set-env,RELEASE_DATE,${CURRENT_DATE},${CONFIG_ENV}); \
				$(call set-env,RELEASE_VERSION,$$VERSION,${CONFIG_ENV}); \
				rm ${CONFIG_ENV}.${EXT_BACKUP}; \
				$(call log-success,Done) \
			else \
				echo "You did not enter the value, please try again"; \
				echo "Skipped"; \
			fi; \
		;; \
		[nN] | [nN][oO]) \
			echo "Skipped"; \
		;; \
		*) \
			echo "Skipped, please enter y/yes or n/no"; \
		;; \
	esac
